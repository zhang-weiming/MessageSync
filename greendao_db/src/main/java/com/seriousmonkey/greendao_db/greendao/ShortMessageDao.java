package com.seriousmonkey.greendao_db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.seriousmonkey.greendao_db.entity.ShortMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHORT_MESSAGE".
*/
public class ShortMessageDao extends AbstractDao<ShortMessage, Long> {

    public static final String TABLENAME = "SHORT_MESSAGE";

    /**
     * Properties of entity ShortMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Id = new Property(1, Long.class, "id", false, "ID");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Desc = new Property(4, String.class, "desc", false, "DESC");
        public final static Property ReceiveTime = new Property(5, long.class, "receiveTime", false, "RECEIVE_TIME");
        public final static Property IsUploaded = new Property(6, boolean.class, "isUploaded", false, "IS_UPLOADED");
        public final static Property LastUpdateTime = new Property(7, long.class, "lastUpdateTime", false, "LAST_UPDATE_TIME");
    }


    public ShortMessageDao(DaoConfig config) {
        super(config);
    }
    
    public ShortMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHORT_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"ID\" INTEGER," + // 1: id
                "\"ADDRESS\" TEXT," + // 2: address
                "\"NAME\" TEXT," + // 3: name
                "\"DESC\" TEXT," + // 4: desc
                "\"RECEIVE_TIME\" INTEGER NOT NULL ," + // 5: receiveTime
                "\"IS_UPLOADED\" INTEGER NOT NULL ," + // 6: isUploaded
                "\"LAST_UPDATE_TIME\" INTEGER NOT NULL );"); // 7: lastUpdateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHORT_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShortMessage entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
        stmt.bindLong(6, entity.getReceiveTime());
        stmt.bindLong(7, entity.getIsUploaded() ? 1L: 0L);
        stmt.bindLong(8, entity.getLastUpdateTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShortMessage entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
        stmt.bindLong(6, entity.getReceiveTime());
        stmt.bindLong(7, entity.getIsUploaded() ? 1L: 0L);
        stmt.bindLong(8, entity.getLastUpdateTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShortMessage readEntity(Cursor cursor, int offset) {
        ShortMessage entity = new ShortMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // desc
            cursor.getLong(offset + 5), // receiveTime
            cursor.getShort(offset + 6) != 0, // isUploaded
            cursor.getLong(offset + 7) // lastUpdateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShortMessage entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReceiveTime(cursor.getLong(offset + 5));
        entity.setIsUploaded(cursor.getShort(offset + 6) != 0);
        entity.setLastUpdateTime(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShortMessage entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShortMessage entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShortMessage entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
